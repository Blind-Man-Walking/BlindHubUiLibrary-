-- ====================================================================================================
-- BlindHub Custom UI Library
-- Version: 1.0.0
-- Author: Gemini (Generated)
-- Description: A basic, self-contained UI library designed to mimic Fluent UI's structure
--              for easy integration with existing scripts.
-- ====================================================================================================

-- Core UI Library Table
local BlindHubUI = {}

-- Global Options table to store UI element states (toggles, sliders)
-- This mimics Fluent's Options table for easier integration with your main script.
BlindHubUI.Options = {}

-- ====================================================================================================
-- Configuration & Styling
-- ====================================================================================================
local ACCENT_COLOR = Color3.fromRGB(120, 80, 220) -- BlindHub Purple
local BACKGROUND_COLOR = Color3.fromRGB(35, 35, 40)
local ELEMENT_COLOR = Color3.fromRGB(60, 60, 65)
locfal TEXT_COLOR = Color3.fromRGB(255, 255, 255)
local PLACEHOLDER_COLOR = Color3.fromRGB(120, 120, 120)
local SUCCESS_COLOR = Color3.fromRGB(80, 255, 80)
local ERROR_COLOR = Color3.fromRGB(255, 80, 80)
local NOTIFY_BG_COLOR = Color3.fromRGB(45, 45, 50)

local FONT = Enum.Font.Gotham
local BOLD_FONT = Enum.Font.GothamBold
local TEXT_SIZE = 14
local TITLE_TEXT_SIZE = 18

-- ====================================================================================================
-- Internal Helper Functions
-- ====================================================================================================

-- Creates a draggable functionality for a UI element
local function makeDraggable(uiElement)
    local isDragging = false
    local dragStartPos = Vector2.new(0, 0)
    local elementStartPos = UDim2.new(0, 0, 0, 0)

    uiElement.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            dragStartPos = input.Position
            elementStartPos = uiElement.Position
        end
    end)

    uiElement.InputChanged:Connect(function(input)
        if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStartPos
            uiElement.Position = UDim2.new(elementStartPos.X.Scale, elementStartPos.X.Offset + delta.X,
                                            elementStartPos.Y.Scale, elementStartPos.Y.Offset + delta.Y)
        end
    end)

    uiElement.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = false
        end
    end)
end

-- Creates a basic notification system
function BlindHubUI:Notify(config)
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local PlayerGui = LocalPlayer:FindFirstChildOfClass("PlayerGui")
    if not PlayerGui then return end

    local notificationGui = Instance.new("ScreenGui")
    notificationGui.Name = "BlindHub_Notification"
    notificationGui.ResetOnSpawn = false
    notificationGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    notificationGui.e = 9999 -- Ensure it's on top
    notificationGui.Parent = PlayerGui

    local notificationFrame = Instance.new("Frame")
    notificationFrame.Size = UDim2.new(0, 250, 0, 70)
    notificationFrame.Position = UDim2.new(1, -260, 0, 10) -- Top right corner
    notificationFrame.AnchorPoint = Vector2.new(1, 0)
    notificationFrame.BackgroundColor3 = NOTIFY_BG_COLOR
    notificationFrame.BorderSizePixel = 0
    notificationFrame.Parent = notificationGui
    Instance.new("UICorner", notificationFrame).CornerRadius = UDim.new(0, 8)

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -10, 0, 25)
    titleLabel.Position = UDim2.new(0, 5, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = BOLD_FONT
    titleLabel.TextSize = 16
    titleLabel.TextColor3 = TEXT_COLOR
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Text = config.Title or "Notification"
    titleLabel.Parent = notificationFrame

    local contentLabel = Instance.new("TextLabel")
    contentLabel.Size = UDim2.new(1, -10, 0, 30)
    contentLabel.Position = UDim2.new(0, 5, 0, 30)
    contentLabel.BackgroundTransparency = 1
    contentLabel.Font = FONT
    contentLabel.TextSize = TEXT_SIZE
    contentLabel.TextColor3 = TEXT_COLOR
    contentLabel.TextXAlignment = Enum.TextXAlignment.Left
    contentLabel.TextWrapped = true
    contentLabel.Text = config.Content or "Message"
    contentLabel.Parent = notificationFrame

    local duration = config.Duration or 5 -- Default 5 seconds
    local typeColor = TEXT_COLOR
    if config.Type == "success" then typeColor = SUCCESS_COLOR
    elseif config.Type == "error" then typeColor = ERROR_COLOR end
    titleLabel.TextColor3 = typeColor

    -- Simple fade out animation
    notificationFrame.BackgroundTransparency = 0
    titleLabel.TextTransparency = 0
    contentLabel.TextTransparency = 0

    task.spawn(function()
        task.wait(duration - 1) -- Wait until last second for fade
        for i = 1, 10 do
            notificationFrame.BackgroundTransparency += 0.1
            titleLabel.TextTransparency += 0.1
            contentLabel.TextTransparency += 0.1
            task.wait(0.1)
        end
        notificationGui:Destroy()
    end)
end

-- ====================================================================================================
-- Main Window Creation
-- ====================================================================================================
function BlindHubUI:CreateWindow(config)
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local PlayerGui = LocalPlayer:FindFirstChildOfClass("PlayerGui")
    if not PlayerGui then warn("BlindHubUI | PlayerGui not found.") return nil end

    -- Destroy existing UI if it exists to prevent duplicates
    local existingGui = PlayerGui:FindFirstChild("BlindHub_MainUI")
    if existingGui then existingGui:Destroy() end

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "BlindHub_MainUI"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = PlayerGui

    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = config.Size or UDim2.fromOffset(500, 300)
    mainFrame.Position = UDim2.new(0.5, -mainFrame.Size.X.Offset / 2, 0.5, -mainFrame.Size.Y.Offset / 2)
    mainFrame.BackgroundColor3 = BACKGROUND_COLOR
    mainFrame.BackgroundTransparency = 0.2
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 10)
    makeDraggable(mainFrame) -- Make the main frame draggable

    -- Title Bar
    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.BackgroundColor3 = ACCENT_COLOR
    titleBar.BackgroundTransparency = 0.1
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -40, 1, 0)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = BOLD_FONT
    titleLabel.TextSize = TITLE_TEXT_SIZE
    titleLabel.TextColor3 = TEXT_COLOR
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Text = "  " .. (config.Title or "BlindHub")
    titleLabel.Parent = titleBar

    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 30, 1, 0)
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.AnchorPoint = Vector2.new(1, 0)
    closeButton.BackgroundTransparency = 1
    closeButton.Font = BOLD_FONT
    closeButton.Text = "X"
    closeButton.TextColor3 = ERROR_COLOR
    closeButton.TextSize = 20
    closeButton.Parent = titleBar
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)

    -- Tab Container (Left Side)
    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(0, config.TabWidth or 120, 1, -30)
    tabContainer.Position = UDim2.new(0, 0, 0, 30)
    tabContainer.BackgroundColor3 = BACKGROUND_COLOR
    tabContainer.BorderSizePixel = 0
    tabContainer.Parent = mainFrame

    local tabListLayout = Instance.new("UIListLayout")
    tabListLayout.FillDirection = Enum.FillDirection.Vertical
    tabListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    tabListLayout.Padding = UDim.new(0, 5)
    tabListLayout.Parent = tabContainer

    -- Content Frame (Right Side)
    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, -(config.TabWidth or 120), 1, -30)
    contentFrame.Position = UDim2.new(0, config.TabWidth or 120, 0, 30)
    contentFrame.BackgroundColor3 = BACKGROUND_COLOR
    contentFrame.BackgroundTransparency = 0.5
    contentFrame.BorderSizePixel = 0
    contentFrame.Parent = mainFrame

    local currentActiveTabContent = nil
    local tabs = {}
    local tabButtons = {}

    local windowObject = {
        Root = mainFrame, -- Reference to the main UI frame
        Visible = true, -- Initial visibility state
        Minimize = function(self) -- Basic minimize/hide function
            self.Visible = not self.Visible
            self.Root.Visible = self.Visible
        end
    }

    function windowObject:AddTab(tabConfig)
        local tabButton = Instance.new("TextButton")
        tabButton.Name = tabConfig.Title .. "TabButton"
        tabButton.Size = UDim2.new(1, -10, 0, 30)
        tabButton.BackgroundColor3 = ELEMENT_COLOR
        tabButton.TextColor3 = TEXT_COLOR
        tabButton.Font = FONT
        tabButton.TextSize = TEXT_SIZE
        tabButton.Text = tabConfig.Title
        tabButton.Parent = tabContainer
        Instance.new("UICorner", tabButton).CornerRadius = UDim.new(0, 5)

        local tabContentFrame = Instance.new("Frame")
        tabContentFrame.Name = tabConfig.Title .. "TabContent"
        tabContentFrame.Size = UDim2.new(1, 0, 1, 0)
        tabContentFrame.BackgroundTransparency = 1
        tabContentFrame.Parent = contentFrame
        tabContentFrame.Visible = false -- Hidden by default

        local contentLayout = Instance.new("UIListLayout")
        contentLayout.FillDirection = Enum.FillDirection.Vertical
        contentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        contentLayout.Padding = UDim.new(0, 10)
        contentLayout.Parent = tabContentFrame

        local scrollFrame = Instance.new("ScrollingFrame")
        scrollFrame.Size = UDim2.new(1, 0, 1, 0)
        scrollFrame.BackgroundTransparency = 1
        scrollFrame.CanvasSize = UDim2.new(0,0,0,0) -- Will be updated by UIListLayout
        scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
        scrollFrame.Parent = tabContentFrame

        local sectionListLayout = Instance.new("UIListLayout")
        sectionListLayout.FillDirection = Enum.FillDirection.Vertical
        sectionListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        sectionListLayout.Padding = UDim.new(0, 10)
        sectionListLayout.Parent = scrollFrame

        local tabObject = {}
        tabObject.ContentFrame = scrollFrame -- Reference to the scroll frame for adding elements

        function tabObject:AddSection(title)
            local sectionFrame = Instance.new("Frame")
            sectionFrame.Size = UDim2.new(1, 0, 0, 0) -- Height will be automatic
            sectionFrame.AutomaticSize = Enum.AutomaticSize.Y
            sectionFrame.BackgroundTransparency = 1
            sectionFrame.Parent = scrollFrame

            local sectionLayout = Instance.new("UIListLayout")
            sectionLayout.FillDirection = Enum.FillDirection.Vertical
            sectionLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
            sectionLayout.Padding = UDim.new(0, 5)
            sectionLayout.Parent = sectionFrame

            local sectionTitleLabel = Instance.new("TextLabel")
            sectionTitleLabel.Size = UDim2.new(1, 0, 0, 20)
            sectionTitleLabel.Text = "--- " .. title .. " ---"
            sectionTitleLabel.TextColor3 = ACCENT_COLOR
            sectionTitleLabel.BackgroundTransparency = 1
            sectionTitleLabel.Font = BOLD_FONT
            sectionTitleLabel.TextSize = TEXT_SIZE
            sectionTitleLabel.TextXAlignment = Enum.TextXAlignment.Left
            sectionTitleLabel.Parent = sectionFrame

            local sectionObject = {}

            function sectionObject:AddToggle(name, options)
                local toggleFrame = Instance.new("Frame")
                toggleFrame.Size = UDim2.new(1, 0, 0, 25)
                toggleFrame.BackgroundTransparency = 1
                toggleFrame.Parent = sectionFrame

                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(0.7, 0, 1, 0)
                label.Text = options.Title
                label.BackgroundTransparency = 1
                label.TextColor3 = TEXT_COLOR
                label.Font = FONT
                label.TextSize = TEXT_SIZE
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.Parent = toggleFrame

                local toggleButton = Instance.new("TextButton")
                toggleButton.Size = UDim2.new(0.25, 0, 1, 0)
                toggleButton.Position = UDim2.new(0.75, 0, 0, 0)
                toggleButton.BackgroundColor3 = ELEMENT_COLOR
                toggleButton.TextColor3 = TEXT_COLOR
                toggleButton.Font = FONT
                toggleButton.TextSize = TEXT_SIZE
                toggleButton.Parent = toggleFrame
                Instance.new("UICorner", toggleButton).CornerRadius = UDim.new(0, 5)

                local value = options.Default or false
                local function updateToggleVisual()
                    if value then
                        toggleButton.BackgroundColor3 = SUCCESS_COLOR
                        toggleButton.Text = "ON"
                    else
                        toggleButton.BackgroundColor3 = ELEMENT_COLOR
                        toggleButton.Text = "OFF"
                    end
                end
                updateToggleVisual()

                toggleButton.MouseButton1Click:Connect(function()
                    value = not value
                    updateToggleVisual()
                    BlindHubUI.Options[name].Value = value -- Update global Options
                    if options.Callback then options.Callback(value) end
                end)

                -- Store in global Options table
                BlindHubUI.Options[name] = {
                    Value = value,
                    SetValue = function(newValue)
                        value = newValue
                        updateToggleVisual()
                        if options.Callback then options.Callback(value) end
                    end
                }
                return BlindHubUI.Options[name]
            end

            function sectionObject:AddButton(options)
                local button = Instance.new("TextButton")
                button.Size = UDim2.new(1, 0, 0, 25)
                button.Text = options.Title
                button.BackgroundColor3 = ELEMENT_COLOR
                button.TextColor3 = TEXT_COLOR
                button.Font = FONT
                button.TextSize = TEXT_SIZE
                button.Parent = sectionFrame
                Instance.new("UICorner", button).CornerRadius = UDim.new(0, 5)

                button.MouseButton1Click:Connect(function()
                    if options.Callback then options.Callback() end
                end)
            end

            function sectionObject:AddSlider(name, options)
                local sliderFrame = Instance.new("Frame")
                sliderFrame.Size = UDim2.new(1, 0, 0, 40)
                sliderFrame.BackgroundTransparency = 1
                sliderFrame.Parent = sectionFrame

                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(1, 0, 0, 15)
                label.Text = options.Title .. ": " .. (options.Default or options.Min)
                label.BackgroundTransparency = 1
                label.TextColor3 = TEXT_COLOR
                label.Font = FONT
                label.TextSize = TEXT_SIZE
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.Parent = sliderFrame

                local slider = Instance.new("Frame")
                slider.Size = UDim2.new(1, 0, 0, 10)
                slider.Position = UDim2.new(0, 0, 0, 20)
                slider.BackgroundColor3 = ELEMENT_COLOR
                slider.BorderSizePixel = 0
                slider.Parent = sliderFrame
                Instance.new("UICorner", slider).CornerRadius = UDim.new(0, 5)

                local handle = Instance.new("Frame")
                handle.Size = UDim2.new(0, 20, 1, 0)
                handle.BackgroundColor3 = ACCENT_COLOR
                handle.BorderSizePixel = 0
                handle.Parent = slider
                Instance.new("UICorner", handle).CornerRadius = UDim.new(0, 5)

                local value = options.Default or options.Min
                local min = options.Min or 0
                local max = options.Max or 100
                local rounding = options.Rounding or 0

                local function updateHandlePosition()
                    local normalizedValue = (value - min) / (max - min)
                    handle.Position = UDim2.new(normalizedValue, -handle.Size.X.Offset / 2, 0, 0)
                    label.Text = options.Title .. ": " .. string.format("%." .. rounding .. "f", value)
                end
                updateHandlePosition()

                local isDragging = false
                handle.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        isDragging = true
                    end
                end)

                handle.InputChanged:Connect(function(input)
                    if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                        local relativeX = input.Position.X - slider.AbsolutePosition.X
                        local normalized = math.clamp(relativeX / slider.AbsoluteSize.X, 0, 1)
                        value = min + (max - min) * normalized
                        updateHandlePosition()
                        BlindHubUI.Options[name].Value = value -- Update global Options
                        if options.Callback then options.Callback(value) end
                    end
                end)

                handle.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        isDragging = false
                    end
                end)

                -- Store in global Options table
                BlindHubUI.Options[name] = {
                    Value = value,
                    SetValue = function(newValue)
                        value = math.clamp(newValue, min, max)
                        updateHandlePosition()
                        if options.Callback then options.Callback(value) end
                    end,
                    Visible = true -- Mimic Fluent's visible property
                }
                return BlindHubUI.Options[name]
            end

            function sectionObject:AddDropdown(name, options)
                local dropdownFrame = Instance.new("Frame")
                dropdownFrame.Size = UDim2.new(1, 0, 0, 25)
                dropdownFrame.BackgroundTransparency = 1
                dropdownFrame.Parent = sectionFrame

                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(0.7, 0, 1, 0)
                label.Text = options.Title
                label.BackgroundTransparency = 1
                label.TextColor3 = TEXT_COLOR
                label.Font = FONT
                label.TextSize = TEXT_SIZE
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.Parent = dropdownFrame

                local dropdownButton = Instance.new("TextButton")
                dropdownButton.Size = UDim2.new(0.25, 0, 1, 0)
                dropdownButton.Position = UDim2.new(0.75, 0, 0, 0)
                dropdownButton.BackgroundColor3 = ELEMENT_COLOR
                dropdownButton.TextColor3 = TEXT_COLOR
                dropdownButton.Font = FONT
                dropdownButton.TextSize = TEXT_SIZE
                dropdownButton.Text = options.Default or "Select..."
                dropdownButton.Parent = dropdownFrame
                Instance.new("UICorner", dropdownButton).CornerRadius = UDim.new(0, 5)

                local dropdownList = Instance.new("Frame")
                dropdownList.Size = UDim2.new(1, 0, 0, 0) -- Height will be automatic
                dropdownList.AutomaticSize = Enum.AutomaticSize.Y
                dropdownList.Position = UDim2.new(0, 0, 1, 5)
                dropdownList.BackgroundColor3 = BACKGROUND_COLOR
                dropdownList.BorderSizePixel = 0
                dropdownList.Visible = false
                dropdownList.ZIndex = 2 -- Ensure it's above other elements
                dropdownList.Parent = dropdownFrame
                Instance.new("UICorner", dropdownList).CornerRadius = UDim.new(0, 5)

                local listLayout = Instance.new("UIListLayout")
                listLayout.FillDirection = Enum.FillDirection.Vertical
                listLayout.Padding = UDim.new(0, 2)
                listLayout.Parent = dropdownList

                local value = options.Default or nil

                local function populateDropdown(values)
                    for _, child in pairs(dropdownList:GetChildren()) do
                        if child:IsA("TextButton") then child:Destroy() end
                    end
                    for _, val in ipairs(values) do
                        local itemButton = Instance.new("TextButton")
                        itemButton.Size = UDim2.new(1, -10, 0, 20)
                        itemButton.Position = UDim2.new(0, 5, 0, 0)
                        itemButton.Text = val
                        itemButton.BackgroundColor3 = ELEMENT_COLOR
                        itemButton.TextColor3 = TEXT_COLOR
                        itemButton.Font = FONT
                        itemButton.TextSize = TEXT_SIZE
                        itemButton.Parent = dropdownList
                        Instance.new("UICorner", itemButton).CornerRadius = UDim.new(0, 3)

                        itemButton.MouseButton1Click:Connect(function()
                            value = val
                            dropdownButton.Text = val
                            dropdownList.Visible = false
                            BlindHubUI.Options[name].Value = value -- Update global Options
                            if options.Callback then options.Callback(value) end
                        end)
                    end
                end
                populateDropdown(options.Values or {})

                dropdownButton.MouseButton1Click:Connect(function()
                    dropdownList.Visible = not dropdownList.Visible
                end)

                -- Store in global Options table
                BlindHubUI.Options[name] = {
                    Value = value,
                    SetValues = function(newValues)
                        populateDropdown(newValues)
                    end,
                    SetValue = function(newValue)
                        if table.find(options.Values, newValue) then
                            value = newValue
                            dropdownButton.Text = newValue
                            BlindHubUI.Options[name].Value = value
                        end
                    end
                }
                return BlindHubUI.Options[name]
            end

            function sectionObject:AddParagraph(options)
                local paragraphLabel = Instance.new("TextLabel")
                paragraphLabel.Size = UDim2.new(1, 0, 0, 0)
                paragraphLabel.AutomaticSize = Enum.AutomaticSize.Y -- Adjust height automatically
                paragraphLabel.Text = options.Content or ""
                paragraphLabel.BackgroundTransparency = 1
                paragraphLabel.TextColor3 = TEXT_COLOR
                paragraphLabel.Font = FONT
                paragraphLabel.TextSize = TEXT_SIZE
                paragraphLabel.TextXAlignment = Enum.TextXAlignment.Left
                paragraphLabel.TextWrapped = true
                paragraphLabel.Parent = sectionFrame

                local titleLabel = Instance.new("TextLabel")
                titleLabel.Size = UDim2.new(1, 0, 0, 0)
                titleLabel.AutomaticSize = Enum.AutomaticSize.Y
                titleLabel.Text = options.Title or ""
                titleLabel.BackgroundTransparency = 1
                titleLabel.TextColor3 = ACCENT_COLOR
                titleLabel.Font = BOLD_FONT
                titleLabel.TextSize = TEXT_SIZE + 2
                titleLabel.TextXAlignment = Enum.TextXAlignment.Left
                titleLabel.TextWrapped = true
                titleLabel.Parent = sectionFrame
                titleLabel.ZIndex = 2 -- Ensure title is above content if they overlap

                -- Reorder to put title first
                titleLabel.LayoutOrder = 1
                paragraphLabel.LayoutOrder = 2
            end

            return sectionObject
        end

        tabs[tabConfig.Title] = tabContentFrame
        tabButtons[tabConfig.Title] = tabButton

        tabButton.MouseButton1Click:Connect(function()
            windowObject:SelectTab(tabConfig.Title)
        end)

        return tabObject
    end

    function windowObject:SelectTab(tabTitle)
        if currentActiveTabContent then
            currentActiveTabContent.Visible = false
            tabButtons[currentActiveTabContent.Name:gsub("TabContent", "")].BackgroundColor3 = ELEMENT_COLOR
        end

        local newTabContent = tabs[tabTitle]
        local newTabButton = tabButtons[tabTitle]

        if newTabContent and newTabButton then
            newTabContent.Visible = true
            newTabButton.BackgroundColor3 = ACCENT_COLOR
            currentActiveTabContent = newTabContent
        else
            warn("BlindHubUI | Attempted to select non-existent tab: " .. tabTitle)
        end
    end

    return windowObject
end

-- Return the main library table
return BlindHubUI
